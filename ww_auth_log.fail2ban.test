<?php

/**
 * Functionally test ww_auth_log by attempting 5 failed logins using a pseudo ip
 * and checking that fail2ban bans it. Overrides the normal test to avoid having
 * to run the test several times and incur the long setup time for each.
 *
 * NOTE: F2BTEST_IP, F2BTEST_HTTPIP & F2BTEST_DOMAIN env vars must be set to use
 *       a pseudo IP address and avoid banning the site from itself.
 */
class WWAuthLogFail2BanTestCase extends WWAuthLogTestCase {

  /**
  * Test Case metadata
  */
  public static function getInfo() {
    return array(
      'name' => 'WW Auth log - Fail2ban Test',
      'description' => 'Do multiple failed logins to trigger fail2ban',
      'group' => '__ww__',
    );
  }

  public function setUp() {
    $this->unblockIP();
    parent::setUp();
  }

  public function tearDown() {
    $this->unblockIP();
  }

  /**
  * Trigger multiple failed login tests.
  **/
  public function testFailedLogin() {
    for ($i=0; $i <= 5; $i++) {
      parent::testFailedLogin();
      sleep(1);// avoid blocking from mod_evasive
    }
  }

  /**
  * @inheritdoc
  **/
  protected function curlExec($curl_options, $redirect = FALSE) {
    // spoof ip address
    $curl_options[CURLOPT_INTERFACE] = $this->getIP();
    $curl_options[CURLOPT_RESOLVE] = array(
      implode(':', [
        $this->getHostname(),
        80,
        $this->getHTTPIP(),
      ]),
      'wwdb2:3306:' . $this->getWWDBIP(),
    );

    // make sure sites that redirect (i.e. port 80 -> 443) still work
    $curl_options[CURLOPT_FOLLOWLOCATION] = true;

    // make sure it doesn't run forever if something is broken
    $curl_options[CURLOPT_TIMEOUT] = 10;

    parent::curlExec($curl_options, $redirect);
  }

  /**
   * Get the IP address of the site container on the test network.
   */
  protected function getIP() {
    $value = getenv('F2BTEST_IP');
    if (!$value) {
      throw new \InvalidArgumentException('F2BTEST_IP is not defined');
    }
    return $value;
  }

  /**
   * Get the IP address of the httpd container on the test network.
   */
  protected function getHTTPIP() {
    $value = getenv('F2BTEST_HTTPIP');
    if (!$value) {
      throw new \InvalidArgumentException('F2BTEST_HTTPIP is not defined');
    }
    return $value;
  }

  /**
   * Get the IP address of the httpd container on the test network.
   */
  protected function getWWDBIP() {
    $value = getenv('F2BTEST_WWDBIP');
    if (!$value) {
      throw new \InvalidArgumentException('F2BTEST_WWDBIP is not defined');
    }
    return $value;
  }

  /**
   * Get the hostname of the httpd container on the test network.
   */
  protected function getHostname() {
    $value = getenv('F2BTEST_DOMAIN');
    if (!$value) {
      throw new \InvalidArgumentException('F2BTEST_DOMAIN is not defined');
    }
    return $value;
  }

  /**
  * Make sure the IP isn't blocked by drupal
  **/
  protected function unblockIP() {
    db_query("DELETE FROM blocked_ips WHERE ip = '". $this->getIP() ."';");
  }
}
